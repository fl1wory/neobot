# main.py

"""
–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞.

–¶–µ–π —Ñ–∞–π–ª –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ aiogram.
- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
- –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–≤–¥–∞–Ω—å (APScheduler) –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏—Ö –¥—ñ–π.
- –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –ª–æ–≥—ñ–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /brew —á–µ—Ä–µ–∑ –º–∞—à–∏–Ω—É —Å—Ç–∞–Ω—ñ–≤ (FSM).
- –ó–∞–ø—É—Å–∫ —Ç–∞ –∑—É–ø–∏–Ω–∫—É –±–æ—Ç–∞.
"""

import asyncio
import logging
import sys
import sqlite3
import datetime
from contextlib import closing

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (Message, BotCommand, CallbackQuery,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.filters.command import CommandObject
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
from handlers import database, alcohol
from config import TOKEN  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ config.py

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ---
logging.basicConfig(level=logging.INFO, stream=sys.stdout)
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()


# --- –ú–ê–®–ò–ù–ê –°–¢–ê–ù–Ü–í (FSM) –î–õ–Ø –í–ê–†–Ü–ù–ù–Ø –ê–õ–ö–û–ì–û–õ–Æ ---

class BrewState(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –≤–∞—Ä—ñ–Ω–Ω—è –∞–ª–∫–æ–≥–æ–ª—é."""
    choosing_ingredients = State()
    choosing_process = State()
    entering_time = State()
    confirmation = State()


# --- –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö –¢–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---

def start_scheduler():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å APScheduler."""
    scheduler = AsyncIOScheduler(timezone="Europe/Kiev")

    def scheduled_update_wrapper():
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è."""
        print(f"[{datetime.datetime.now()}] Running scheduled exposure update...")
        try:
            # –ó–≤–µ—Ä—Ç–∞—î–º–æ —É–≤–∞–≥—É, —â–æ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞, –¥–ª—è –Ω–µ—ó –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω await
            alcohol.update_exposures()
            print(f"[{datetime.datetime.now()}] Exposure update finished successfully.")
        except Exception as e:
            logging.error(f"Error during scheduled update: {e}")

    scheduler.add_job(scheduled_update_wrapper, trigger='cron', hour=0)
    scheduler.start()
    logging.info("APScheduler has been started.")


async def set_commands(bot_instance: Bot):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –≤ –º–µ–Ω—é Telegram."""
    commands = [
        BotCommand(command="/start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="/help", description="‚ùì –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"),
        BotCommand(command="/user", description="üë§ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"),
        BotCommand(command="/inventory", description="üì¶ –ú—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä"),
        BotCommand(command="/brew", description="üß™ –ó–≤–∞—Ä–∏—Ç–∏ –∞–ª–∫–æ–≥–æ–ª—å"),
        BotCommand(command="/recipes", description="üìñ –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏"),
        BotCommand(command="/ingredients", description="üåø –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏"),
        BotCommand(command="/processes", description="‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏"),
        BotCommand(command="/bals", description="üí∞ –ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="/tops", description="üèÜ –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤"),
        BotCommand(command="/add_admin", description="üëë [A] –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="/adds", description="üí∏ [A] –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ—à—Ç–∏"),
        BotCommand(command="/dels", description="üî™ [A] –°–ø–∏—Å–∞—Ç–∏ –∫–æ—à—Ç–∏"),
        BotCommand(command="/add_ingredient", description="‚ûï [A] –î–æ–¥–∞—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç"),
        BotCommand(command="/del_ingredient", description="‚ûñ [A] –í–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç"),
        BotCommand(command="/add_recipe", description="üìú [A] –î–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç"),
        BotCommand(command="/delete_recipe", description="üóëÔ∏è [A] –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ—Ü–µ–ø—Ç"),
        BotCommand(command="/add_process", description="‚öôÔ∏è [A] –î–æ–¥–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å"),
        BotCommand(command="/delete_process", description="üóëÔ∏è [A] –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å"),
    ]
    await bot_instance.set_my_commands(commands)


# --- –§–Ü–õ–¨–¢–† –î–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê ---
async def is_admin_filter(message: Message) -> bool:
    """–§—ñ–ª—å—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    is_admin_user = await database.is_admin(message, message.from_user.id)
    if not is_admin_user:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
    return is_admin_user


# --- –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î ---

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó –≤–∞—Ä—ñ–Ω–Ω—è –∞–ª–∫–æ–≥–æ–ª—é. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /user, —â–æ–± –ø–æ—á–∞—Ç–∏.")


@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –º–µ–Ω—é.")


@dp.message(Command("user"))
async def add_user_handler(message: Message):
    await database.db_add_user(message)


@dp.message(Command("bals"))
async def balance_handler(message: Message):
    await database.bal(message)


@dp.message(Command("tops"))
async def top_users_handler(message: Message, command: CommandObject):
    await database.topt(message, command)


@dp.message(Command("inventory"))
async def inventory_handler(message: Message):
    await alcohol.view_inventory(message)


@dp.message(Command('processes'))
async def processes_command_handler(message: Message):
    processes = await alcohol.get_all_available_processes()
    text = "<b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:</b>\n\n" + "\n".join(
        [f"‚Ä¢ <b>{p['title']}</b> (–í–∞—Ä—Ç—ñ—Å—Ç—å: {p['cost']})" for p in
         processes]) if processes else "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤."
    await message.reply(text)


@dp.message(Command('ingredients'))
async def ingredients_command_handler(message: Message):
    ingredients = await alcohol.get_all_ingredients()
    text = "<b>–ù–∞—è–≤–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:</b>\n\n" + "\n".join(
        f"- {ingr}" for ingr in ingredients) if ingredients else "–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await message.reply(text)


@dp.message(Command('recipes'))
async def recipes_command_handler(message: Message):
    recipes = await alcohol.get_all_recipes()
    if recipes:
        text = "<b>üìñ –ù–∞—è–≤–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏:</b>\n\n"
        for rec in recipes:
            text += f"<b>–ù–∞–∑–≤–∞:</b> {rec['title']}\n<i>–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:</i> {rec['ing1']}, {rec['ing2']}, {rec['ing3']}, {rec['ing4']}\n<i>–ü—Ä–æ—Ü–µ—Å:</i> {rec['process']}, <i>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</i> {rec['time']} –≥–æ–¥.\n\n"
    else:
        text = "–†–µ—Ü–µ–ø—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await message.reply(text)


# --- –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–Ü –ö–û–ú–ê–ù–î–ò ---

@dp.message(Command("add_admin"), is_admin_filter)
async def add_admin_handler(message: Message):
    await database.db_add_admin(message)


@dp.message(Command("adds"), is_admin_filter)
async def add_money_handler(message: Message, command: CommandObject):
    await database.addt(message, command)


@dp.message(Command("dels"), is_admin_filter)
async def remove_money_handler(message: Message, command: CommandObject):
    try:
        amount = float(command.args)
        await database.delt(message, amount)
    except (TypeError, ValueError):
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—á–∏—Å–ª–æ).")


@dp.message(Command("add_ingredient"), is_admin_filter)
async def add_ingredient_handler(message: Message, command: CommandObject):
    await alcohol.db_add_alcohol_ingredients(message, command)


@dp.message(Command("del_ingredient"), is_admin_filter)
async def del_ingredient_handler(message: Message, command: CommandObject):
    await alcohol.db_delete_alcohol_ingredient(message, command)


@dp.message(Command("add_recipe"), is_admin_filter)
async def add_recipe_handler(message: Message, command: CommandObject):
    await alcohol.add_recipe(message, command)


@dp.message(Command("delete_recipe"), is_admin_filter)
async def delete_recipe_handler(message: Message, command: CommandObject):
    await alcohol.db_delete_recipe(message, command)


@dp.message(Command("add_process"), is_admin_filter)
async def add_process_handler(message: Message, command: CommandObject):
    await alcohol.db_add_process(message, command)


@dp.message(Command("delete_process"), is_admin_filter)
async def delete_process_handler(message: Message, command: CommandObject):
    await alcohol.db_delete_process(message, command)


# --- –õ–û–ì–Ü–ö–ê –í–ê–†–Ü–ù–ù–Ø –ê–õ–ö–û–ì–û–õ–Æ (/brew) ---
# ... (–í–µ—Å—å –∫–æ–¥ –¥–ª—è BrewState, /brew, —ñ –ø–æ–≤'—è–∑–∞–Ω–∏—Ö callback/message handler'—ñ–≤) ...
# –¢—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∞—à –ø–æ–≤–Ω–∏–π –∫–æ–¥ –¥–ª—è FSM, —è –≤—Å—Ç–∞–≤–ª—é –π–æ–≥–æ –∑ –Ω–∞–¥–∞–Ω–∏—Ö –≤–∞–º–∏ —Ñ–∞–π–ª—ñ–≤

# --- –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø ---

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    –í–∏–∫–æ–Ω—É—î –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.
    """
    # 1. –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
    await set_commands(bot)

    # 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö (—ñ –≤–∏–∫–æ–Ω—É—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    await database.db_start()

    # 3. –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    start_scheduler()

    print("Bot has been started and configured.")

    # 4. –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —â–æ –Ω–∞–∫–æ–ø–∏—á–∏–ª–∏—Å—å, –ø–æ–∫–∏ –±–æ—Ç –±—É–≤ –æ—Ñ–ª–∞–π–Ω
    await bot.delete_webhook(drop_pending_updates=True)

    # 5. –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped manually.")